//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Gameplay/Player/PlayerInputsActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputsActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputsActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputsActions"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""8c1d0c3c-3275-4432-b4a9-85c6f68f2123"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""d6613e19-e726-435c-925e-d4a00c324e1c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LookAround"",
                    ""type"": ""Value"",
                    ""id"": ""57ae2f00-e805-460f-9241-6547d544988c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ae13ebd9-da8f-4642-99ce-443d2fbd5030"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""402fb869-39b8-4056-8242-e9898972eae2"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9e34e8e8-3bb6-4255-8a88-0b0e4fcc3dd1"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""1a6f3b39-a7d5-4736-8167-d812c0c070c9"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6485f64a-6b05-4538-9a83-c1f8a747d4ba"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""4447755a-e6d3-4497-904f-1d13570ee894"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""0cdc92e1-4357-4842-a95a-3f64dae234dc"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookAround"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""aab17d6a-4eb0-41ef-a787-30c22d90c153"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookAround"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""484a5e26-299b-4e97-96a7-9732bae713e6"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookAround"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""58f65e77-a87a-4892-94ea-73a21ff3080a"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookAround"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c33d6c6c-c755-4cc5-8a9e-5c307f718420"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookAround"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""9f025224-2e7c-45f1-8cbb-295e5d4a7995"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookAround"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Building"",
            ""id"": ""613c3426-c1a4-42a1-9aae-4e4c020ca8fe"",
            ""actions"": [
                {
                    ""name"": ""PlaceCurrentBuilding"",
                    ""type"": ""Button"",
                    ""id"": ""91519161-18f0-4522-b42f-49901ec8c31f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleBuildingMode"",
                    ""type"": ""Button"",
                    ""id"": ""47734993-b40b-49c6-9e0f-0c84a46ec9a1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchToNextBuilding"",
                    ""type"": ""Button"",
                    ""id"": ""37aa1af7-5708-4a65-b7a9-39a5d5e43700"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchToPreviousBuilding"",
                    ""type"": ""Button"",
                    ""id"": ""fde9ccf6-534b-4fa5-b448-4d016f5c5a15"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c0760b50-b000-4e1b-abb6-8f732ce5230c"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlaceCurrentBuilding"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""405ab024-1182-4bdc-9cb6-32813c827cac"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleBuildingMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d961a616-2879-46f4-8741-b65b557dd867"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchToPreviousBuilding"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b6e1c89e-060a-4a30-add7-e142b2f0b924"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchToNextBuilding"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_Movement = m_Movement.FindAction("Movement", throwIfNotFound: true);
        m_Movement_LookAround = m_Movement.FindAction("LookAround", throwIfNotFound: true);
        // Building
        m_Building = asset.FindActionMap("Building", throwIfNotFound: true);
        m_Building_PlaceCurrentBuilding = m_Building.FindAction("PlaceCurrentBuilding", throwIfNotFound: true);
        m_Building_ToggleBuildingMode = m_Building.FindAction("ToggleBuildingMode", throwIfNotFound: true);
        m_Building_SwitchToNextBuilding = m_Building.FindAction("SwitchToNextBuilding", throwIfNotFound: true);
        m_Building_SwitchToPreviousBuilding = m_Building.FindAction("SwitchToPreviousBuilding", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private IMovementActions m_MovementActionsCallbackInterface;
    private readonly InputAction m_Movement_Movement;
    private readonly InputAction m_Movement_LookAround;
    public struct MovementActions
    {
        private @PlayerInputsActions m_Wrapper;
        public MovementActions(@PlayerInputsActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Movement_Movement;
        public InputAction @LookAround => m_Wrapper.m_Movement_LookAround;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void SetCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnMovement;
                @LookAround.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnLookAround;
                @LookAround.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnLookAround;
                @LookAround.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnLookAround;
            }
            m_Wrapper.m_MovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @LookAround.started += instance.OnLookAround;
                @LookAround.performed += instance.OnLookAround;
                @LookAround.canceled += instance.OnLookAround;
            }
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // Building
    private readonly InputActionMap m_Building;
    private IBuildingActions m_BuildingActionsCallbackInterface;
    private readonly InputAction m_Building_PlaceCurrentBuilding;
    private readonly InputAction m_Building_ToggleBuildingMode;
    private readonly InputAction m_Building_SwitchToNextBuilding;
    private readonly InputAction m_Building_SwitchToPreviousBuilding;
    public struct BuildingActions
    {
        private @PlayerInputsActions m_Wrapper;
        public BuildingActions(@PlayerInputsActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @PlaceCurrentBuilding => m_Wrapper.m_Building_PlaceCurrentBuilding;
        public InputAction @ToggleBuildingMode => m_Wrapper.m_Building_ToggleBuildingMode;
        public InputAction @SwitchToNextBuilding => m_Wrapper.m_Building_SwitchToNextBuilding;
        public InputAction @SwitchToPreviousBuilding => m_Wrapper.m_Building_SwitchToPreviousBuilding;
        public InputActionMap Get() { return m_Wrapper.m_Building; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BuildingActions set) { return set.Get(); }
        public void SetCallbacks(IBuildingActions instance)
        {
            if (m_Wrapper.m_BuildingActionsCallbackInterface != null)
            {
                @PlaceCurrentBuilding.started -= m_Wrapper.m_BuildingActionsCallbackInterface.OnPlaceCurrentBuilding;
                @PlaceCurrentBuilding.performed -= m_Wrapper.m_BuildingActionsCallbackInterface.OnPlaceCurrentBuilding;
                @PlaceCurrentBuilding.canceled -= m_Wrapper.m_BuildingActionsCallbackInterface.OnPlaceCurrentBuilding;
                @ToggleBuildingMode.started -= m_Wrapper.m_BuildingActionsCallbackInterface.OnToggleBuildingMode;
                @ToggleBuildingMode.performed -= m_Wrapper.m_BuildingActionsCallbackInterface.OnToggleBuildingMode;
                @ToggleBuildingMode.canceled -= m_Wrapper.m_BuildingActionsCallbackInterface.OnToggleBuildingMode;
                @SwitchToNextBuilding.started -= m_Wrapper.m_BuildingActionsCallbackInterface.OnSwitchToNextBuilding;
                @SwitchToNextBuilding.performed -= m_Wrapper.m_BuildingActionsCallbackInterface.OnSwitchToNextBuilding;
                @SwitchToNextBuilding.canceled -= m_Wrapper.m_BuildingActionsCallbackInterface.OnSwitchToNextBuilding;
                @SwitchToPreviousBuilding.started -= m_Wrapper.m_BuildingActionsCallbackInterface.OnSwitchToPreviousBuilding;
                @SwitchToPreviousBuilding.performed -= m_Wrapper.m_BuildingActionsCallbackInterface.OnSwitchToPreviousBuilding;
                @SwitchToPreviousBuilding.canceled -= m_Wrapper.m_BuildingActionsCallbackInterface.OnSwitchToPreviousBuilding;
            }
            m_Wrapper.m_BuildingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PlaceCurrentBuilding.started += instance.OnPlaceCurrentBuilding;
                @PlaceCurrentBuilding.performed += instance.OnPlaceCurrentBuilding;
                @PlaceCurrentBuilding.canceled += instance.OnPlaceCurrentBuilding;
                @ToggleBuildingMode.started += instance.OnToggleBuildingMode;
                @ToggleBuildingMode.performed += instance.OnToggleBuildingMode;
                @ToggleBuildingMode.canceled += instance.OnToggleBuildingMode;
                @SwitchToNextBuilding.started += instance.OnSwitchToNextBuilding;
                @SwitchToNextBuilding.performed += instance.OnSwitchToNextBuilding;
                @SwitchToNextBuilding.canceled += instance.OnSwitchToNextBuilding;
                @SwitchToPreviousBuilding.started += instance.OnSwitchToPreviousBuilding;
                @SwitchToPreviousBuilding.performed += instance.OnSwitchToPreviousBuilding;
                @SwitchToPreviousBuilding.canceled += instance.OnSwitchToPreviousBuilding;
            }
        }
    }
    public BuildingActions @Building => new BuildingActions(this);
    public interface IMovementActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnLookAround(InputAction.CallbackContext context);
    }
    public interface IBuildingActions
    {
        void OnPlaceCurrentBuilding(InputAction.CallbackContext context);
        void OnToggleBuildingMode(InputAction.CallbackContext context);
        void OnSwitchToNextBuilding(InputAction.CallbackContext context);
        void OnSwitchToPreviousBuilding(InputAction.CallbackContext context);
    }
}
